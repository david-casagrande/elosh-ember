eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"elosh-client/adapters/about\", \n  [\"elosh-client/adapters/application\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ApplicationAdapter = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = ApplicationAdapter.extend({\n\n      buildURL: function(type, id){\n        var url = this._super(type, id) + \'?action=get_about\';\n        return url;\n      }\n\n    });\n  });//# sourceURL=elosh-client/adapters/about.js");

;eval("define(\"elosh-client/adapters/application\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DS.ActiveModelAdapter.extend({\n\n      buildURL: function(){\n        return \'/wp-admin/admin-ajax.php\';\n      }\n\n    });\n  });//# sourceURL=elosh-client/adapters/application.js");

;eval("define(\"elosh-client/adapters/contact\", \n  [\"elosh-client/adapters/application\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ApplicationAdapter = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = ApplicationAdapter.extend({\n\n      buildURL: function(type, id){\n        var url = this._super(type, id) + \'?action=get_contact\';\n        return url;\n      }\n\n    });\n  });//# sourceURL=elosh-client/adapters/contact.js");

;eval("define(\"elosh-client/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"elosh-client/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=elosh-client/app.js");

;eval("define(\"elosh-client/components/art-modal\", \n  [\"ember\",\"elosh-client/mixins/components/art-modal-height-management\",\"elosh-client/mixins/components/art-modal-loading-management\",\"elosh-client/mixins/components/art-modal-keyboard-navigation\",\"elosh-client/mixins/components/art-modal-close-intent\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var HeightManagement = __dependency2__[\"default\"];\n    var LoadingManagement = __dependency3__[\"default\"];\n    var KeyboardNavigation = __dependency4__[\"default\"];\n    var CloseIntent = __dependency5__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Component.extend(\n      HeightManagement,\n      LoadingManagement,\n      KeyboardNavigation,\n      CloseIntent, {\n\n      classNames: [\'art-modal\'],\n\n      actions: {\n        closeModal: function() {\n          this.sendAction(\'closeModal\');\n        },\n        nextItem: function() {\n          this.sendAction(\'nextItem\', this.get(\'art\'));\n        },\n        previousItem: function() {\n          this.sendAction(\'previousItem\', this.get(\'art\'));\n        }\n      },\n\n      _parseKeyPress: function(e) {\n        if(!this.get(\'imageLoaded\')) { return; }\n        this._super(e);\n      },\n\n    });\n  });//# sourceURL=elosh-client/components/art-modal.js");

;eval("define(\"elosh-client/mixins/components/art-modal-height-management\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Mixin.create({\n\n      artModalBindingId: null,\n\n      setupHeightManagement: function() {\n        this._setArtModalBindingId();\n        this._setArtModalManagement();\n      }.on(\'didInsertElement\'),\n\n      _setArtModalBindingId: function() {\n        var id = [\'resize\', \'artModalComponent\', this.get(\'elementId\')];\n        this.set(\'artModalBindingId\', id.join(\'.\'));\n      },\n\n      _setArtModalManagement: function() {\n        var win = Ember.$(window);\n        this._setHeight(win);\n        win.on(this.get(\'artModalBindingId\'), function() {\n          this._setHeight(win);\n        }.bind(this));\n      },\n\n      _setHeight: function(win) {\n        var marginTotal   = 80, //80 for outside margin\n            modalPadding  = 40,\n            windowHeight  = win.outerHeight(),\n            detailsHeight = this.$().find(\'.artwork-details\').outerHeight();\n\n        var modalHeight = windowHeight - marginTotal - modalPadding - detailsHeight;\n\n        this.$().css({ height: windowHeight - marginTotal });\n        this.$().find(\'.art-modal-image\').css({\n          height: modalHeight,\n          \'line-height\' : modalHeight+\'px\'\n        });\n      },\n\n      teardownHeightManagement: function() {\n        Ember.$(window).off(this.get(\'artModalBindingId\'));\n      }.on(\'willDestroyElement\')\n\n    });\n  });//# sourceURL=elosh-client/mixins/components/art-modal-height-management.js");

;eval("define(\"elosh-client/mixins/components/art-modal-loading-management\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /* global ProgressBar */\n\n    var Ember = __dependency1__[\"default\"];\n\n    var ImageDataStore = {};\n\n    __exports__[\"default\"] = Ember.Mixin.create({\n\n      imageLoaded: false,\n      imageDataUrl: null,\n\n      progressLoaderDuration: 400,\n\n      _setup: function() {\n        this.set(\'progress\', this._createProgressBar());\n        this._loadImage();\n      }.on(\'didInsertElement\'),\n\n      _teardown: function() {\n        this.get(\'progress\').destroy();\n      }.on(\'willDestroyElement\'),\n\n      _createProgressBar: function() {\n        return new ProgressBar.Circle(\'#progress-circle\', {\n          color: \'#ccc\',\n          strokeWidth: 8,\n          fill: \'#fff\',\n          duration: this.get(\'progressLoaderDuration\')\n        });\n      },\n\n      _loadImage: function() {\n        var artUrl = this.get(\'art.image.url\');\n        if(typeof ImageDataStore[artUrl] !== \'undefined\') {\n          this._setImageData(ImageDataStore[artUrl]);\n          this.get(\'progress\').animate(1);\n        }\n        else {\n          var self = this;\n          var oReq = new XMLHttpRequest();\n          oReq.onload = function() {\n            self._readFile(this.response);\n          };\n          oReq.onprogress = function(e) {\n            var p = parseFloat(e.loaded / e.total).toFixed(2);\n            self.get(\'progress\').animate(p);\n          };\n          oReq.open(\'get\', this.get(\'art.image.url\'), true);\n          oReq.responseType = \'blob\';\n          oReq.send();\n        }\n      },\n\n      _readFile: function(blob) {\n        var self = this;\n        var reader  = new FileReader();\n        reader.onloadend = function () {\n          self._setImageData(reader.result);\n        };\n        reader.readAsDataURL(blob);\n      },\n\n      _setImageData: function(dataUrl) {\n        this.set(\'imageDataUrl\', dataUrl);\n        this._setImageLoaded();\n        this._cacheImageData(dataUrl);\n      },\n\n      _cacheImageData: function(dataUrl) {\n        var artUrl = this.get(\'art.image.url\');\n        if(typeof ImageDataStore[artUrl] !== \'undefined\') { return; }\n        ImageDataStore[artUrl] = dataUrl;\n      },\n\n      _setImageLoaded: function() {\n        Ember.run.later(this, function() {\n          this.set(\'imageLoaded\', true);\n        }, this.get(\'progressLoaderDuration\'));\n      }\n\n    });\n  });//# sourceURL=elosh-client/mixins/components/art-modal-loading-management.js");

;eval("define(\"elosh-client/mixins/components/art-modal-keyboard-navigation\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Mixin.create({\n\n      keyboardNavigationBindingId: null,\n\n      _setupKeyboardNavigation: function() {\n        this._setKeyboardNavigationBindingId();\n        this._setKeyboardNavigationManagement();\n      }.on(\'didInsertElement\'),\n\n      _setKeyboardNavigationBindingId: function() {\n        var id = [\'keyup\', \'artModalComponent\', this.get(\'elementId\')];\n        this.set(\'keyboardNavigationBindingId\', id.join(\'.\'));\n      },\n\n      _setKeyboardNavigationManagement: function() {\n        var win = Ember.$(window);\n        win.on(this.get(\'keyboardNavigationBindingId\'), function(e) {\n          this._parseKeyPress(e);\n        }.bind(this));\n      },\n\n      _parseKeyPress: function(e) {\n        var keyCode = e.keyCode;\n        if(keyCode !== 37 && keyCode !== 39) { return; }\n        var action = keyCode === 37 ? \'previousItem\' : \'nextItem\';\n        this.send(action);\n      },\n\n      _teardownKeyboardNavigationManagement: function() {\n        Ember.$(window).off(this.get(\'keyboardNavigationBindingId\'));\n      }.on(\'willDestroyElement\')\n\n    });\n  });//# sourceURL=elosh-client/mixins/components/art-modal-keyboard-navigation.js");

;eval("define(\"elosh-client/mixins/components/art-modal-close-intent\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Mixin.create({\n\n      closeIntentBindingId: null,\n\n      _setupCloseIntent: function() {\n        this._setCloseIntentBindingId();\n        this._setCloseIntent();\n      }.on(\'didInsertElement\'),\n\n      _setCloseIntentBindingId: function() {\n        var id = [\'click\', \'artModalComponent\', this.get(\'elementId\')];\n        this.set(\'closeIntentBindingId\', id.join(\'.\'));\n      },\n\n      _setCloseIntent: function() {\n        var win = Ember.$(window);\n        win.on(this.get(\'closeIntentBindingId\'), function(e) {\n          this._parseClickEvent(e);\n        }.bind(this));\n      },\n\n      _parseClickEvent: function(e) {\n        var target = Ember.$(e.target),\n            parents = target.parents(\'#modal .margin\');\n\n        if(parents.length < 1 && this.get(\'imageLoaded\')) {\n          this.send(\'closeModal\');\n        }\n      },\n\n      _teardownCloseIntent: function() {\n        Ember.$(window).off(this.get(\'closeIntentBindingId\'));\n      }.on(\'willDestroyElement\')\n\n    });\n  });//# sourceURL=elosh-client/mixins/components/art-modal-close-intent.js");

;eval("define(\"elosh-client/components/max-width\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Component.extend({\n\n      attributeBindings: [\'style\'],\n\n      style: function() {\n        var width = this.get(\'width\') ? this.get(\'width\') : 0;\n        return \'max-width: \' + width + \'px;\';\n      }.property(\'width\')\n\n    });\n  });//# sourceURL=elosh-client/components/max-width.js");

;eval("define(\"elosh-client/components/nav-section\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Component.extend({\n\n      classNames: [\'section\'],\n      open: false,\n\n      closedHeight: 20,\n      openHeight: 0,\n\n      attributeBindings: [\'style\'],\n\n      style: function() {\n        var sectionHeight = this.get(\'open\') ? this.get(\'openHeight\') : this.get(\'closedHeight\');\n        return \'height: \' + sectionHeight + \'px;\';\n      }.property(\'open\', \'openHeight\'),\n\n      _setOpenHeight: function() {\n        var height = this.$().find(\'.links\').outerHeight();\n        this.set(\'openHeight\', height + this.get(\'closedHeight\'));\n      }.on(\'didInsertElement\'),\n\n      _currentPathChange: function() {\n        var parentRoute = this.get(\'currentPath\').split(\'.\').objectAt(0),\n            open = parentRoute === this.get(\'path\');\n\n        this.set(\'open\', open);\n      }.observes(\'currentPath\').on(\'init\')\n\n    });\n  });//# sourceURL=elosh-client/components/nav-section.js");

;eval("define(\"elosh-client/controllers/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.ObjectController.extend({\n\n      modalOpen: false,\n\n      themeDirectory: function() {\n        return window.ELOSH_THEME_DIRECTORY;\n      }.property(),\n\n      logoURL: function() {\n        return this.get(\'themeDirectory\') + \'/assets/dist/images/elosh-logo.jpg\';\n      }.property(\'themeDirectory\'),\n\n      footerLogoURL: function() {\n        return this.get(\'themeDirectory\') + \'/assets/dist/images/elosh-footer.jpg\';\n      }.property(\'themeDirectory\')\n\n    });\n  });//# sourceURL=elosh-client/controllers/application.js");

;eval("define(\"elosh-client/initializers/export-application-global\", \n  [\"ember\",\"elosh-client/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=elosh-client/initializers/export-application-global.js");

;eval("define(\"elosh-client/initializers/preload-artwork\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function initialize() {\n      //console.log(window.ELOSH_PRELOADED_ARTWORK)\n      //console.log(container.lookup(\'store:main\'), application);\n\n      //var store = container.lookup(\'store:main\');\n      //store.pushPayload(window.ELOSH_PRELOADED_ARTWORK);\n      // application.inject(\'route\', \'foo\', \'service:foo\');\n    }\n\n    __exports__.initialize = initialize;__exports__[\"default\"] = {\n      name: \'preload-artwork\',\n      after: \'store\',\n      initialize: initialize\n    };\n  });//# sourceURL=elosh-client/initializers/preload-artwork.js");

;eval("define(\"elosh-client/mixins/routes/redirect-to-first-item\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Mixin.create({\n\n      appModelName: null,\n      appModelRoute: null,\n\n      redirect: function() {\n        var appModels = this.modelFor(\'application\'),\n            models = appModels[this.get(\'appModelName\')],\n            firstModel = models ? models.get(\'firstObject\') : null,\n            slug = firstModel ? firstModel.get(\'slug\') : null;\n\n        if(slug) {\n          var route = this.get(\'appModelRoute\');\n          this.transitionTo(route, slug);\n        }\n      }\n\n    });\n  });//# sourceURL=elosh-client/mixins/routes/redirect-to-first-item.js");

;eval("define(\"elosh-client/mixins/routes/scroll-to-top\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Mixin.create({\n\n      beforeModel: function() {\n        Ember.$(\'#app-window\').scrollTop(0);\n        this._super();\n      }\n\n    });\n  });//# sourceURL=elosh-client/mixins/routes/scroll-to-top.js");

;eval("define(\"elosh-client/models/about\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    var a = DS.attr, b = DS.belongsTo;\n\n    __exports__[\"default\"] = DS.Model.extend({\n      image:        b(\'imageObject\'),\n      narrativeOne: a(\'string\'),\n      narrativeTwo: a(\'string\')\n    });\n  });//# sourceURL=elosh-client/models/about.js");

;eval("define(\"elosh-client/models/artwork-category\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    var a = DS.attr;\n\n    __exports__[\"default\"] = DS.Model.extend({\n      name:                a(\'string\'),\n      categoryDescription: a(\'string\'),\n      slug:                a(\'string\')\n    });\n  });//# sourceURL=elosh-client/models/artwork-category.js");

;eval("define(\"elosh-client/models/artwork\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    var a = DS.attr, b = DS.belongsTo;\n\n    __exports__[\"default\"] = DS.Model.extend({\n      bookTitle:   a(\'string\'),\n      categories:  a(),\n      description: a(\'string\'),\n      medium:      a(\'string\'),\n      slug:        a(\'string\'),\n      title:       a(\'string\'),\n\n      image:       b(\'imageObject\'),\n      thumbnail:   b(\'imageObject\')\n    });\n  });//# sourceURL=elosh-client/models/artwork.js");

;eval("define(\"elosh-client/models/book\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    var a = DS.attr, b = DS.belongsTo, h = DS.hasMany;\n\n    __exports__[\"default\"] = DS.Model.extend({\n      title:       a(\'string\'),\n      titleNotes:  a(\'string\'),\n      bannerImage: b(\'imageObject\'),\n      coverImage:  b(\'imageObject\'),\n      narrative:   a(\'string\'),\n      slug:        a(\'string\'),\n      bookPages:   h(\'artwork\')\n    });\n  });//# sourceURL=elosh-client/models/book.js");

;eval("define(\"elosh-client/models/contact\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    var a = DS.attr;\n\n    __exports__[\"default\"] = DS.Model.extend({\n      contactNarrative: a(\'string\'),\n      email:            a(\'string\'),\n      phone:            a(\'string\'),\n      twitter:          a(\'string\'),\n      storeLink:        a(\'string\'),\n\n      mailTo: function(){\n        return this.get(\'email\') ? \'mailto:\'+this.get(\'email\') : null;\n      }.property(\'email\'),\n\n      twitterLink: function(){\n        return this.get(\'twitter\') ? \'https://twitter.com/\'+this.get(\'twitter\') : null;\n      }.property(\'twitter\')\n\n    });\n  });//# sourceURL=elosh-client/models/contact.js");

;eval("define(\"elosh-client/models/image-object\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    var a = DS.attr;\n\n    __exports__[\"default\"] = DS.Model.extend({\n      url:    a(\'string\'),\n      height: a(\'number\'),\n      width:  a(\'number\')\n    });\n  });//# sourceURL=elosh-client/models/image-object.js");

;eval("define(\"elosh-client/router\", \n  [\"ember\",\"elosh-client/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n\n      this.resource(\'artwork\', function() {\n        this.route(\'category\', { path: \':category_slug\' }, function() {\n          this.route(\'show\', { path: \':artwork_slug\' });\n        });\n      });\n\n      this.resource(\'books\', function() {\n        this.route(\'show\', { path: \':book_slug\' }, function() {\n          this.route(\'bookPage\', { path: \':book_page\' });\n        });\n      });\n\n      this.route(\'about\');\n\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=elosh-client/router.js");

;eval("define(\"elosh-client/routes/about\", \n  [\"ember\",\"elosh-client/mixins/routes/scroll-to-top\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var ScrollToTop = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend(ScrollToTop, {\n\n      model: function() {\n        return Ember.RSVP.hash({\n          about: this.modelFor(\'application\').about,\n          contact: this.modelFor(\'application\').contact\n        });\n        //return this.get(\'store\').find(\'about\', 1);\n      },\n\n      setupController: function(controller, model) {\n        //this._super(controller, model);\n\n        controller.setProperties({\n          model: model.about,\n          contact: model.contact\n        });\n        // var contactModel = this.modelFor(\'application\').contact;\n        // controller.set(\'contact\', contactModel);\n      }\n\n    });\n  });//# sourceURL=elosh-client/routes/about.js");

;eval("define(\"elosh-client/routes/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n\n      model: function() {\n        var store = this.get(\'store\');\n        return Ember.RSVP.hash({\n          books:             store.find(\'book\', { \'action\': \'get_books\' }),\n          artworkCategories: store.find(\'artworkCategory\', { \'action\': \'get_artwork_categories\' }),\n          contact:           store.find(\'contact\', 1),\n          about:             store.find(\'about\', 1),\n          artwork:           store.find(\'artwork\', { \'action\': \'get_artwork\' })\n        });\n      },\n\n      afterModel: function() {\n        return new Ember.RSVP.Promise(function(resolve) {\n          //Ember.run.later(() => {\n            Ember.$(\'#elosh-stub\').remove();\n            resolve();\n          //}, 2000);\n        });\n      },\n\n      actions: {\n        openModal: function(opts) {\n          this._renderModal(opts);\n        },\n        closeModal: function() {\n          this._disconnectModal();\n        },\n        willTransition: function() {\n          this._disconnectModal();\n          return true;\n        }\n      },\n\n      _renderModal: function(opts) {\n        var template = opts.template,\n        data = {\n          into:   \'application\',\n          outlet: \'modal\'\n        };\n\n        if(opts.controller) {\n          data.controller = opts.controller;\n        }\n        this.render(template, data);\n        this.get(\'controller\').set(\'modalOpen\', true);\n      },\n\n      _disconnectModal: function() {\n        this.get(\'controller\').set(\'modalOpen\', false);\n        this.disconnectOutlet({ outlet: \'modal\', parentView: \'application\' });\n      }\n\n    });\n  });//# sourceURL=elosh-client/routes/application.js");

;eval("define(\"elosh-client/routes/artwork\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n\n      _loadedArtwork: null,\n\n      model: function() {\n        return this.modelFor(\'application\').artwork;\n        // if(!this.get(\'_loadedArtwork\')) {\n        //   var artwork = this.get(\'store\').find(\'artwork\', { \'action\': \'get_artwork\' });\n        //   this.set(\'_loadedArtwork\', artwork);\n        // }\n        // return this.get(\'_loadedArtwork\');\n      }\n\n    });\n  });//# sourceURL=elosh-client/routes/artwork.js");

;eval("define(\"elosh-client/routes/artwork/category\", \n  [\"ember\",\"elosh-client/mixins/routes/scroll-to-top\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var ScrollToTop = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend(ScrollToTop, {\n\n      actions: {\n        closeModal: function() {\n          var slug = this.get(\'controller.model.category.slug\');\n          this.transitionTo(\'artwork.category\', slug);\n          return true;\n        },\n        nextItem: function(art) {\n          this._transitionToArt(art);\n        },\n        previousItem: function(art) {\n          this._transitionToArt(art, true);\n        },\n        linkToArtModal: function(art) {\n          this.transitionTo(\'artwork.category.show\', art.get(\'slug\'));\n        }\n      },\n\n      model: function(params) {\n        var artwork = this.modelFor(\'artwork\'),\n            artworkCategories = this.store.all(\'artworkCategory\'),\n            category = artworkCategories.findBy(\'slug\', params.category_slug);\n\n        artwork = artwork.filter(function(artwork) {\n          var categories = artwork.get(\'categories\');\n          return categories.contains(params.category_slug);\n        });\n\n        return Ember.Object.create({ artwork: artwork, category: category });\n      },\n\n      _transitionToArt: function(art) {\n        var previous = (arguments[1] !== void 0 ? arguments[1] : false);\n        var allArtwork = this.get(\'controller.model.artwork\'),\n            artIndex, nextArtIndex;\n\n        allArtwork.find(function(artwork, idx) {\n          var found = artwork.get(\'id\') === art.get(\'id\');\n          if(found) { artIndex = idx; }\n          return found;\n        });\n\n        if(previous) {\n          nextArtIndex = artIndex !== 0 ? (artIndex - 1) : allArtwork.get(\'length\') - 1;\n        }\n        else {\n          nextArtIndex = artIndex < (allArtwork.get(\'length\') - 1) ? (artIndex + 1) : 0;\n        }\n\n        this.transitionTo(\'artwork.category.show\', allArtwork.objectAt(nextArtIndex).get(\'slug\'));\n      }\n\n    });\n  });//# sourceURL=elosh-client/routes/artwork/category.js");

;eval("define(\"elosh-client/routes/artwork/category/show\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n\n      model: function(params) {\n        var artwork = this.store.all(\'artwork\'),\n            art = artwork.findBy(\'slug\', params.artwork_slug);\n\n        return art ? art : {};\n      },\n\n      renderTemplate: function(controller) {\n        this.send(\'openModal\', { template: \'artwork.category.show\', controller: controller });\n      }\n\n    });\n  });//# sourceURL=elosh-client/routes/artwork/category/show.js");

;eval("define(\"elosh-client/routes/artwork/index\", \n  [\"ember\",\"elosh-client/mixins/routes/redirect-to-first-item\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var RedirectToFirstItem = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend(\n      RedirectToFirstItem, {\n\n      appModelName: \'artworkCategories\',\n      appModelRoute: \'artwork.category\'\n\n    });\n  });//# sourceURL=elosh-client/routes/artwork/index.js");

;eval("define(\"elosh-client/routes/books/index\", \n  [\"ember\",\"elosh-client/mixins/routes/redirect-to-first-item\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var RedirectToFirstItem = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend(\n      RedirectToFirstItem, {\n\n      appModelName: \'books\',\n      appModelRoute: \'books.show\'\n\n    });\n  });//# sourceURL=elosh-client/routes/books/index.js");

;eval("define(\"elosh-client/routes/books/show\", \n  [\"ember\",\"elosh-client/mixins/routes/scroll-to-top\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var ScrollToTop = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend(ScrollToTop, {\n\n      actions: {\n        closeModal: function() {\n          var slug = this.get(\'controller.model.slug\');\n          this.transitionTo(\'books.show\', slug);\n          return true;\n        },\n        nextItem: function(bookPage) {\n          this._transitionToBookPage(bookPage);\n        },\n        previousItem: function(bookPage) {\n          this._transitionToBookPage(bookPage, true);\n        },\n        linkToArtModal: function(bookPage) {\n          this.transitionTo(\'books.show.bookPage\', bookPage.get(\'slug\'));\n        }\n      },\n\n      model: function(params) {\n        var books = this.store.all(\'book\'),\n            book = books.findBy(\'slug\', params.book_slug);\n\n        return book ? book : {};\n      },\n\n      _transitionToBookPage: function(bookPage) {\n        var previous = (arguments[1] !== void 0 ? arguments[1] : false);\n        var bookPages = this.get(\'controller.model.bookPages\'),\n            bookIndex, nextBookIndex;\n\n        bookPages.find(function(page, idx) {\n          var found = page.get(\'id\') === bookPage.get(\'id\');\n          if(found) { bookIndex = idx; }\n          return found;\n        });\n\n        if(previous) {\n          nextBookIndex = bookIndex !== 0 ? (bookIndex - 1) : bookPages.get(\'length\') - 1;\n        }\n        else {\n          nextBookIndex = bookIndex < (bookPages.get(\'length\') - 1) ? (bookIndex + 1) : 0;\n        }\n\n        this.transitionTo(\'books.show.bookPage\', bookPages.objectAt(nextBookIndex).get(\'slug\'));\n      }\n\n    });\n  });//# sourceURL=elosh-client/routes/books/show.js");

;eval("define(\"elosh-client/routes/books/show/book-page\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n\n      model: function(params) {\n        var artwork = this.store.all(\'artwork\'),\n            art = artwork.findBy(\'slug\', params.book_page);\n\n        return art ? art : {};\n      },\n\n      renderTemplate: function(controller) {\n        this.send(\'openModal\', { template: \'books.show.bookPage\', controller: controller });\n      }\n\n    });\n  });//# sourceURL=elosh-client/routes/books/show/book-page.js");

;eval("define(\"elosh-client/routes/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Route.extend({\n\n      redirect: function() {\n        this.transitionTo(\'artwork\');\n      }\n\n    });\n  });//# sourceURL=elosh-client/routes/index.js");

;eval("define(\"elosh-client/serializers/about\", \n  [\"elosh-client/serializers/application\",\"ember-data\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ApplicationSerializer = __dependency1__[\"default\"];\n    var DS = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = ApplicationSerializer.extend(\n      DS.EmbeddedRecordsMixin, {\n\n        attrs: {\n          image: { embedded: \'always\' }\n        }\n\n    });\n  });//# sourceURL=elosh-client/serializers/about.js");

;eval("define(\"elosh-client/serializers/application\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DS.ActiveModelSerializer;\n  });//# sourceURL=elosh-client/serializers/application.js");

;eval("define(\"elosh-client/serializers/artwork-category\", \n  [\"elosh-client/serializers/application\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ApplicationSerializer = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = ApplicationSerializer.extend({\n\n      normalizePayload: function(payload) {\n        payload.artwork_categories.forEach(function(category) {\n          category.id = category.term_id;\n        });\n        return payload;\n      }\n\n    });\n  });//# sourceURL=elosh-client/serializers/artwork-category.js");

;eval("define(\"elosh-client/serializers/artwork\", \n  [\"elosh-client/serializers/application\",\"ember-data\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ApplicationSerializer = __dependency1__[\"default\"];\n    var DS = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = ApplicationSerializer.extend(\n      DS.EmbeddedRecordsMixin, {\n\n        attrs: {\n          thumbnail: { embedded: \'always\' },\n          image: { embedded: \'always\' }\n        }\n\n    });\n  });//# sourceURL=elosh-client/serializers/artwork.js");

;eval("define(\"elosh-client/serializers/book\", \n  [\"elosh-client/serializers/application\",\"ember-data\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ApplicationSerializer = __dependency1__[\"default\"];\n    var DS = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = ApplicationSerializer.extend(\n      DS.EmbeddedRecordsMixin, {\n\n        attrs: {\n          bannerImage: { embedded: \'always\' },\n          coverImage: { embedded: \'always\' },\n          bookPages: { embedded: \'always\' }\n        }\n\n    });\n  });//# sourceURL=elosh-client/serializers/book.js");

;eval("define(\"elosh-client/templates/about\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"          \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"p\");\n              var el2 = dom.createElement(\"a\");\n              dom.setAttribute(el2,\"title\",\"Email Eric Losh\");\n              dom.setAttribute(el2,\"target\",\"_blank\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, element = hooks.element, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element1 = dom.childAt(fragment, [1, 0]);\n              var morph0 = dom.createMorphAt(element1,-1,-1);\n              element(env, element1, context, \"bind-attr\", [], {\"href\": \"contact.mailTo\"});\n              content(env, morph0, context, \"contact.email\");\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"          \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"p\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n              content(env, morph0, context, \"contact.phone\");\n              return fragment;\n            }\n          };\n        }());\n        var child2 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"          \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"p\");\n              var el2 = dom.createTextNode(\"Twitter: \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createElement(\"a\");\n              dom.setAttribute(el2,\"target\",\"_blank\");\n              dom.setAttribute(el2,\"title\",\"Eric Losh\'s Twitter\");\n              var el3 = dom.createTextNode(\"@\");\n              dom.appendChild(el2, el3);\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, element = hooks.element, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [1, 1]);\n              var morph0 = dom.createMorphAt(element0,0,-1);\n              element(env, element0, context, \"bind-attr\", [], {\"href\": \"contact.twitterLink\"});\n              content(env, morph0, context, \"contact.twitter\");\n              return fragment;\n            }\n          };\n        }());\n        var child3 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"narrative-one\");\n              var el2 = dom.createTextNode(\"\\n          \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createUnsafeMorphAt(dom.childAt(fragment, [1]),0,1);\n              content(env, morph0, context, \"narrativeOne\");\n              return fragment;\n            }\n          };\n        }());\n        var child4 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"mini-border\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"div\");\n              dom.setAttribute(el1,\"class\",\"narrative-two\");\n              var el2 = dom.createTextNode(\"\\n          \");\n              dom.appendChild(el1, el2);\n              var el2 = dom.createTextNode(\"\\n        \");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createUnsafeMorphAt(dom.childAt(fragment, [3]),0,1);\n              content(env, morph0, context, \"narrativeTwo\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"about-narratives\");\n            var el2 = dom.createTextNode(\"\\n      \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"div\");\n            dom.setAttribute(el2,\"class\",\"contact-info clear-fix\");\n            var el3 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"p\");\n            var el4 = dom.createElement(\"strong\");\n            var el5 = dom.createTextNode(\"ERIC LOSH\");\n            dom.appendChild(el4, el5);\n            dom.appendChild(el3, el4);\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"      \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element2 = dom.childAt(fragment, [1]);\n            var element3 = dom.childAt(element2, [1]);\n            if (this.cachedFragment) { dom.repairClonedNode(element3,[3,4]); }\n            var morph0 = dom.createMorphAt(element3,2,3);\n            var morph1 = dom.createMorphAt(element3,3,4);\n            var morph2 = dom.createMorphAt(element3,4,5);\n            var morph3 = dom.createMorphAt(element2,2,3);\n            var morph4 = dom.createMorphAt(element2,3,4);\n            element(env, element2, context, \"bind-attr\", [], {\"style\": \"narrativeWidth\"});\n            block(env, morph0, context, \"if\", [get(env, context, \"contact.email\")], {}, child0, null);\n            block(env, morph1, context, \"if\", [get(env, context, \"contact.phone\")], {}, child1, null);\n            block(env, morph2, context, \"if\", [get(env, context, \"contact.twitter\")], {}, child2, null);\n            block(env, morph3, context, \"if\", [get(env, context, \"narrativeOne\")], {}, child3, null);\n            block(env, morph4, context, \"if\", [get(env, context, \"narrativeTwo\")], {}, child4, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"id\",\"about\");\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"img\");\n          dom.setAttribute(el2,\"alt\",\"About Eric Losh\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, element = hooks.element, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element4 = dom.childAt(fragment, [0]);\n          var element5 = dom.childAt(element4, [1]);\n          var morph0 = dom.createMorphAt(element4,2,3);\n          element(env, element5, context, \"bind-attr\", [], {\"src\": \"image.url\"});\n          block(env, morph0, context, \"max-width\", [], {\"width\": get(env, context, \"image.width\")}, child0, null);\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=elosh-client/templates/about.js");

;eval("define(\"elosh-client/templates/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createElement(\"img\");\n            dom.setAttribute(el0,\"alt\",\"Eric Losh\");\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = fragment;\n            element(env, element0, context, \"bind-attr\", [], {\"src\": get(env, context, \"logoURL\")});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"id\",\"left-nav\");\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"brand clear-fix\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"footer clear-fix\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"img\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"p\");\n          var el4 = dom.createTextNode(\"Web by \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"a\");\n          dom.setAttribute(el4,\"href\",\"https://github.com/david-casagrande\");\n          dom.setAttribute(el4,\"target\",\"_blank\");\n          dom.setAttribute(el4,\"title\",\"David Casagrande\");\n          var el5 = dom.createTextNode(\"David Casagrande\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"id\",\"app-window\");\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"margin\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"page clear-fix\");\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"id\",\"modal\");\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"margin\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block, inline = hooks.inline, get = hooks.get, element = hooks.element, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [0]);\n          var element2 = dom.childAt(element1, [4, 1]);\n          var element3 = dom.childAt(fragment, [4]);\n          var morph0 = dom.createMorphAt(dom.childAt(element1, [1]),0,1);\n          var morph1 = dom.createMorphAt(element1,2,3);\n          var morph2 = dom.createMorphAt(dom.childAt(fragment, [2, 1, 1]),0,1);\n          var morph3 = dom.createMorphAt(dom.childAt(element3, [1]),0,1);\n          block(env, morph0, context, \"link-to\", [\"index\"], {}, child0, null);\n          inline(env, morph1, context, \"partial\", [\"partials/main-navigation\"], {});\n          element(env, element2, context, \"bind-attr\", [], {\"src\": get(env, context, \"footerLogoURL\")});\n          content(env, morph2, context, \"outlet\");\n          element(env, element3, context, \"bind-attr\", [], {\"class\": \"modalOpen:show\"});\n          inline(env, morph3, context, \"outlet\", [\"modal\"], {});\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=elosh-client/templates/application.js");

;eval("define(\"elosh-client/templates/artwork/category\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"  \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"artwork-category-image clear-fix\");\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"img\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n  \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1, 1]);\n            element(env, element0, context, \"bind-attr\", [], {\"src\": \"category.categoryDescription\", \"alt\": \"category.name\"});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"h1\");\n          dom.setAttribute(el1,\"class\",\"artwork-category-title\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),-1,-1);\n          var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n          var morph2 = dom.createMorphAt(fragment,2,3,contextualElement);\n          content(env, morph0, context, \"category.name\");\n          block(env, morph1, context, \"if\", [get(env, context, \"category.categoryDescription\")], {}, child0, null);\n          inline(env, morph2, context, \"partial\", [\"partials/artwork-thumbnails\"], {});\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=elosh-client/templates/artwork/category.js");

;eval("define(\"elosh-client/templates/artwork/category/show\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"art-modal\", [], {\"art\": get(env, context, \"model\"), \"closeModal\": \"closeModal\", \"nextItem\": \"nextItem\", \"previousItem\": \"previousItem\"});\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=elosh-client/templates/artwork/category/show.js");

;eval("define(\"elosh-client/templates/books/show\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"h1\");\n            dom.setAttribute(el1,\"class\",\"book-title\");\n            var el2 = dom.createTextNode(\" \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"span\");\n            var el3 = dom.createTextNode(\"- \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element0,-1,0);\n            var morph1 = dom.createMorphAt(dom.childAt(element0, [1]),0,-1);\n            content(env, morph0, context, \"title\");\n            content(env, morph1, context, \"titleNotes\");\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"h1\");\n            dom.setAttribute(el1,\"class\",\"book-title\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),-1,-1);\n            content(env, morph0, context, \"title\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"id\",\"books\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"book-images clear-fix\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"book-banner-image\");\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"img\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"book-cover-image large-5-columns\");\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"img\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"id\",\"book-narrative-and-pages\");\n          dom.setAttribute(el2,\"class\",\"clear-fix\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"book-narrative\");\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"padding\");\n          var el5 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"book-pages\");\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"div\");\n          dom.setAttribute(el4,\"class\",\"padding\");\n          var el5 = dom.createTextNode(\"\\n        \");\n          dom.appendChild(el4, el5);\n          var el5 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\\n  \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element, content = hooks.content, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [0]);\n          var element2 = dom.childAt(element1, [2]);\n          var element3 = dom.childAt(element2, [1, 1]);\n          var element4 = dom.childAt(element2, [3, 1]);\n          var element5 = dom.childAt(element1, [4]);\n          var morph0 = dom.createMorphAt(element1,0,1);\n          var morph1 = dom.createUnsafeMorphAt(dom.childAt(element5, [1, 1]),0,1);\n          var morph2 = dom.createMorphAt(dom.childAt(element5, [3, 1]),0,1);\n          block(env, morph0, context, \"if\", [get(env, context, \"titleNotes\")], {}, child0, child1);\n          element(env, element3, context, \"bind-attr\", [], {\"src\": \"bannerImage.url\"});\n          element(env, element4, context, \"bind-attr\", [], {\"src\": \"coverImage.url\"});\n          content(env, morph1, context, \"narrative\");\n          inline(env, morph2, context, \"partial\", [\"partials/book-thumbnails\"], {});\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=elosh-client/templates/books/show.js");

;eval("define(\"elosh-client/templates/books/show/book-page\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"art-modal\", [], {\"art\": get(env, context, \"model\"), \"closeModal\": \"closeModal\", \"nextItem\": \"nextItem\", \"previousItem\": \"previousItem\"});\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=elosh-client/templates/books/show/book-page.js");

;eval("define(\"elosh-client/templates/components/art-modal\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"img\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            element(env, element0, context, \"bind-attr\", [], {\"src\": \"imageDataUrl\", \"alt\": \"art.title\"});\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createElement(\"p\");\n            dom.setAttribute(el0,\"class\",\"art-title\");\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,-1,-1);\n            content(env, morph0, context, \"art.title\");\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createElement(\"p\");\n            dom.setAttribute(el0,\"class\",\"book-title\");\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,-1,-1);\n            content(env, morph0, context, \"art.bookTitle\");\n            return fragment;\n          }\n        };\n      }());\n      var child3 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createElement(\"p\");\n            dom.setAttribute(el0,\"class\",\"art-medium\");\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,-1,-1);\n            content(env, morph0, context, \"art.medium\");\n            return fragment;\n          }\n        };\n      }());\n      var child4 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createElement(\"div\");\n            dom.setAttribute(el0,\"class\",\"art-description\");\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createUnsafeMorphAt(fragment,-1,-1);\n            content(env, morph0, context, \"art.description\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"art-modal-image\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"artwork-details\");\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"id\",\"progress-circle\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"a\");\n          dom.setAttribute(el1,\"href\",\"#\");\n          dom.setAttribute(el1,\"class\",\"modal-navigation previous\");\n          var el2 = dom.createTextNode(\"Previous\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"a\");\n          dom.setAttribute(el1,\"href\",\"#\");\n          dom.setAttribute(el1,\"class\",\"modal-navigation next\");\n          var el2 = dom.createTextNode(\"Next\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"a\");\n          dom.setAttribute(el1,\"href\",\"#\");\n          dom.setAttribute(el1,\"class\",\"modal-navigation close\");\n          var el2 = dom.createTextNode(\"Close Modal\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [2]);\n          var element2 = dom.childAt(fragment, [4]);\n          var element3 = dom.childAt(fragment, [6]);\n          var element4 = dom.childAt(fragment, [8]);\n          var element5 = dom.childAt(fragment, [10]);\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,-1);\n          var morph1 = dom.createMorphAt(element1,0,1);\n          var morph2 = dom.createMorphAt(element1,1,2);\n          var morph3 = dom.createMorphAt(element1,2,3);\n          var morph4 = dom.createMorphAt(element1,3,4);\n          block(env, morph0, context, \"if\", [get(env, context, \"imageDataUrl\")], {}, child0, null);\n          block(env, morph1, context, \"if\", [get(env, context, \"art.title\")], {}, child1, null);\n          block(env, morph2, context, \"if\", [get(env, context, \"art.bookTitle\")], {}, child2, null);\n          block(env, morph3, context, \"if\", [get(env, context, \"art.medium\")], {}, child3, null);\n          block(env, morph4, context, \"if\", [get(env, context, \"art.description\")], {}, child4, null);\n          element(env, element2, context, \"bind-attr\", [], {\"class\": \"imageLoaded:loaded :loading-overlay\"});\n          element(env, element3, context, \"action\", [\"previousItem\"], {});\n          element(env, element4, context, \"action\", [\"nextItem\"], {});\n          element(env, element5, context, \"action\", [\"closeModal\"], {});\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=elosh-client/templates/components/art-modal.js");

;eval("define(\"elosh-client/templates/components/max-width\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          content(env, morph0, context, \"yield\");\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=elosh-client/templates/components/max-width.js");

;eval("define(\"elosh-client/templates/components/nav-section\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          content(env, morph0, context, \"yield\");\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=elosh-client/templates/components/nav-section.js");

;eval("define(\"elosh-client/templates/loading\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"id\",\"loading-route\");\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"margin\");\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"h1\");\n          var el4 = dom.createTextNode(\"Loading\");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"span\");\n          dom.setAttribute(el4,\"class\",\"first\");\n          var el5 = dom.createTextNode(\".\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"span\");\n          dom.setAttribute(el4,\"class\",\"second\");\n          var el5 = dom.createTextNode(\".\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"span\");\n          dom.setAttribute(el4,\"class\",\"third\");\n          var el5 = dom.createTextNode(\".\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=elosh-client/templates/loading.js");

;eval("define(\"elosh-client/templates/partials/-artwork-thumbnails\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"li\");\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"img\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n      \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"p\");\n            dom.setAttribute(el2,\"class\",\"art-thumb-title\");\n            var el3 = dom.createTextNode(\"\\n          \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"a\");\n            dom.setAttribute(el3,\"href\",\"#\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n      \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            var element1 = dom.childAt(element0, [1]);\n            var morph0 = dom.createMorphAt(dom.childAt(element0, [3, 1]),-1,-1);\n            element(env, element0, context, \"action\", [\"linkToArtModal\", get(env, context, \"art\")], {});\n            element(env, element1, context, \"bind-attr\", [], {\"src\": \"art.thumbnail.url\", \"alt\": \"title\"});\n            content(env, morph0, context, \"art.title\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"ul\");\n          dom.setAttribute(el1,\"class\",\"art-thumbs large-block-grid-4 medium-block-grid-3 small-block-grid-1\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,-1);\n          block(env, morph0, context, \"each\", [get(env, context, \"artwork\")], {\"keyword\": \"art\"}, child0, null);\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=elosh-client/templates/partials/-artwork-thumbnails.js");

;eval("define(\"elosh-client/templates/partials/-book-thumbnails\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"li\");\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createElement(\"a\");\n            dom.setAttribute(el2,\"href\",\"#\");\n            var el3 = dom.createTextNode(\"\\n          \");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createElement(\"img\");\n            dom.appendChild(el2, el3);\n            var el3 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el2, el3);\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, element = hooks.element;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1, 1]);\n            var element1 = dom.childAt(element0, [1]);\n            element(env, element0, context, \"action\", [\"linkToArtModal\", get(env, context, \"bookPage\")], {});\n            element(env, element1, context, \"bind-attr\", [], {\"src\": \"bookPage.thumbnail.url\", \"alt\": \"title\"});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"ul\");\n          dom.setAttribute(el1,\"class\",\"large-block-grid-2 small-block-grid-1\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,-1);\n          block(env, morph0, context, \"each\", [get(env, context, \"bookPages\")], {\"keyword\": \"bookPage\"}, child0, null);\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=elosh-client/templates/partials/-book-thumbnails.js");

;eval("define(\"elosh-client/templates/partials/-main-navigation\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.HTMLBars.template((function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createTextNode(\"Artwork\");\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n                var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n                content(env, morph0, context, \"artworkCategory.name\");\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"          \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              block(env, morph0, context, \"link-to\", [\"artwork.category\", get(env, context, \"artworkCategory.slug\")], {}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"links\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"      \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, block = hooks.block, get = hooks.get;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),0,1);\n            block(env, morph0, context, \"link-to\", [\"artwork\"], {\"classNames\": \"parent-link artwork\"}, child0, null);\n            block(env, morph1, context, \"each\", [get(env, context, \"artworkCategories\")], {\"keyword\": \"artworkCategory\"}, child1, null);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createTextNode(\"Books\");\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                if (this.cachedFragment) { dom.repairClonedNode(fragment,[0,1]); }\n                var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n                content(env, morph0, context, \"book.title\");\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"          \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n              block(env, morph0, context, \"link-to\", [\"books.show\", get(env, context, \"book.slug\")], {}, child0, null);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"links\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"      \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, block = hooks.block, get = hooks.get;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),0,1);\n            block(env, morph0, context, \"link-to\", [\"books\"], {\"classNames\": \"parent-link books\"}, child0, null);\n            block(env, morph1, context, \"each\", [get(env, context, \"books\")], {\"keyword\": \"book\"}, child1, null);\n            return fragment;\n          }\n        };\n      }());\n      var child2 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"          \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"p\");\n              var el2 = dom.createElement(\"a\");\n              dom.setAttribute(el2,\"title\",\"Email Eric Losh\");\n              dom.setAttribute(el2,\"target\",\"_blank\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, element = hooks.element, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [1, 0]);\n              var morph0 = dom.createMorphAt(element0,-1,-1);\n              element(env, element0, context, \"bind-attr\", [], {\"href\": \"contact.mailTo\"});\n              content(env, morph0, context, \"contact.email\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"class\",\"links about\");\n            var el2 = dom.createTextNode(\"\\n        \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"      \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, inline = hooks.inline, content = hooks.content, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element1 = dom.childAt(fragment, [2]);\n            var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n            var morph1 = dom.createUnsafeMorphAt(element1,0,1);\n            var morph2 = dom.createMorphAt(element1,1,2);\n            inline(env, morph0, context, \"link-to\", [\"About\", \"about\"], {\"classNames\": \"parent-link about\"});\n            content(env, morph1, context, \"contact.contactNarrative\");\n            block(env, morph2, context, \"if\", [get(env, context, \"contact.email\")], {}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"nav\");\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"div\");\n          dom.setAttribute(el2,\"class\",\"artwork-nav\");\n          var el3 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"border artwork\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"border books\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\\n\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"border about\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"section\");\n          var el4 = dom.createTextNode(\"\\n      \");\n          dom.appendChild(el3, el4);\n          var el4 = dom.createElement(\"a\");\n          dom.setAttribute(el4,\"class\",\"parent-link shop\");\n          dom.setAttribute(el4,\"target\",\"_blank\");\n          var el5 = dom.createTextNode(\"Shop\");\n          dom.appendChild(el4, el5);\n          dom.appendChild(el3, el4);\n          var el4 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el3, el4);\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createElement(\"div\");\n          dom.setAttribute(el3,\"class\",\"border shop\");\n          dom.appendChild(el2, el3);\n          var el3 = dom.createTextNode(\"\\n\\n  \");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element2 = dom.childAt(fragment, [0, 1]);\n          var element3 = dom.childAt(element2, [10, 1]);\n          var morph0 = dom.createMorphAt(element2,0,1);\n          var morph1 = dom.createMorphAt(element2,3,4);\n          var morph2 = dom.createMorphAt(element2,6,7);\n          block(env, morph0, context, \"nav-section\", [], {\"currentPath\": get(env, context, \"currentPath\"), \"path\": \"artwork\"}, child0, null);\n          block(env, morph1, context, \"nav-section\", [], {\"currentPath\": get(env, context, \"currentPath\"), \"path\": \"books\"}, child1, null);\n          block(env, morph2, context, \"nav-section\", [], {\"currentPath\": get(env, context, \"currentPath\"), \"path\": \"about\"}, child2, null);\n          element(env, element3, context, \"bind-attr\", [], {\"href\": \"contact.storeLink\"});\n          return fragment;\n        }\n      };\n    }()));\n  });//# sourceURL=elosh-client/templates/partials/-main-navigation.js");

;eval("define(\"elosh-client/tests/adapters/about.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - adapters\');\n    test(\'adapters/about.js should pass jshint\', function() { \n      ok(true, \'adapters/about.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/adapters/about.jshint.js");

;eval("define(\"elosh-client/tests/adapters/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - adapters\');\n    test(\'adapters/application.js should pass jshint\', function() { \n      ok(true, \'adapters/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/adapters/application.jshint.js");

;eval("define(\"elosh-client/tests/adapters/contact.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - adapters\');\n    test(\'adapters/contact.js should pass jshint\', function() { \n      ok(true, \'adapters/contact.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/adapters/contact.jshint.js");

;eval("define(\"elosh-client/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/app.jshint.js");

;eval("define(\"elosh-client/tests/components/art-modal.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - components\');\n    test(\'components/art-modal.js should pass jshint\', function() { \n      ok(true, \'components/art-modal.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/components/art-modal.jshint.js");

;eval("define(\"elosh-client/tests/components/max-width.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - components\');\n    test(\'components/max-width.js should pass jshint\', function() { \n      ok(true, \'components/max-width.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/components/max-width.jshint.js");

;eval("define(\"elosh-client/tests/components/nav-section.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - components\');\n    test(\'components/nav-section.js should pass jshint\', function() { \n      ok(true, \'components/nav-section.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/components/nav-section.jshint.js");

;eval("define(\"elosh-client/tests/controllers/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - controllers\');\n    test(\'controllers/application.js should pass jshint\', function() { \n      ok(true, \'controllers/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/controllers/application.jshint.js");

;eval("define(\"elosh-client/tests/elosh-client/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - elosh-client/tests/helpers\');\n    test(\'elosh-client/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'elosh-client/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/elosh-client/tests/helpers/resolver.jshint.js");

;eval("define(\"elosh-client/tests/elosh-client/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - elosh-client/tests/helpers\');\n    test(\'elosh-client/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'elosh-client/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/elosh-client/tests/helpers/start-app.jshint.js");

;eval("define(\"elosh-client/tests/elosh-client/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - elosh-client/tests\');\n    test(\'elosh-client/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'elosh-client/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/elosh-client/tests/test-helper.jshint.js");

;eval("define(\"elosh-client/tests/elosh-client/tests/unit/initializers/preload-artwork-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - elosh-client/tests/unit/initializers\');\n    test(\'elosh-client/tests/unit/initializers/preload-artwork-test.js should pass jshint\', function() { \n      ok(true, \'elosh-client/tests/unit/initializers/preload-artwork-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/elosh-client/tests/unit/initializers/preload-artwork-test.jshint.js");

;eval("define(\"elosh-client/tests/helpers/resolver\", \n  [\"ember/resolver\",\"elosh-client/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=elosh-client/tests/helpers/resolver.js");

;eval("define(\"elosh-client/tests/helpers/start-app\", \n  [\"ember\",\"elosh-client/app\",\"elosh-client/router\",\"elosh-client/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      return App;\n    }\n  });//# sourceURL=elosh-client/tests/helpers/start-app.js");

;eval("define(\"elosh-client/tests/initializers/preload-artwork.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - initializers\');\n    test(\'initializers/preload-artwork.js should pass jshint\', function() { \n      ok(true, \'initializers/preload-artwork.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/initializers/preload-artwork.jshint.js");

;eval("define(\"elosh-client/tests/mixins/components/art-modal-close-intent.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - mixins/components\');\n    test(\'mixins/components/art-modal-close-intent.js should pass jshint\', function() { \n      ok(true, \'mixins/components/art-modal-close-intent.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/mixins/components/art-modal-close-intent.jshint.js");

;eval("define(\"elosh-client/tests/mixins/components/art-modal-height-management.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - mixins/components\');\n    test(\'mixins/components/art-modal-height-management.js should pass jshint\', function() { \n      ok(true, \'mixins/components/art-modal-height-management.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/mixins/components/art-modal-height-management.jshint.js");

;eval("define(\"elosh-client/tests/mixins/components/art-modal-keyboard-navigation.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - mixins/components\');\n    test(\'mixins/components/art-modal-keyboard-navigation.js should pass jshint\', function() { \n      ok(true, \'mixins/components/art-modal-keyboard-navigation.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/mixins/components/art-modal-keyboard-navigation.jshint.js");

;eval("define(\"elosh-client/tests/mixins/components/art-modal-loading-management.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - mixins/components\');\n    test(\'mixins/components/art-modal-loading-management.js should pass jshint\', function() { \n      ok(true, \'mixins/components/art-modal-loading-management.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/mixins/components/art-modal-loading-management.jshint.js");

;eval("define(\"elosh-client/tests/mixins/routes/redirect-to-first-item.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - mixins/routes\');\n    test(\'mixins/routes/redirect-to-first-item.js should pass jshint\', function() { \n      ok(true, \'mixins/routes/redirect-to-first-item.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/mixins/routes/redirect-to-first-item.jshint.js");

;eval("define(\"elosh-client/tests/mixins/routes/scroll-to-top.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - mixins/routes\');\n    test(\'mixins/routes/scroll-to-top.js should pass jshint\', function() { \n      ok(true, \'mixins/routes/scroll-to-top.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/mixins/routes/scroll-to-top.jshint.js");

;eval("define(\"elosh-client/tests/models/about.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/about.js should pass jshint\', function() { \n      ok(true, \'models/about.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/models/about.jshint.js");

;eval("define(\"elosh-client/tests/models/artwork-category.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/artwork-category.js should pass jshint\', function() { \n      ok(true, \'models/artwork-category.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/models/artwork-category.jshint.js");

;eval("define(\"elosh-client/tests/models/artwork.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/artwork.js should pass jshint\', function() { \n      ok(true, \'models/artwork.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/models/artwork.jshint.js");

;eval("define(\"elosh-client/tests/models/book.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/book.js should pass jshint\', function() { \n      ok(true, \'models/book.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/models/book.jshint.js");

;eval("define(\"elosh-client/tests/models/contact.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/contact.js should pass jshint\', function() { \n      ok(true, \'models/contact.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/models/contact.jshint.js");

;eval("define(\"elosh-client/tests/models/image-object.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/image-object.js should pass jshint\', function() { \n      ok(true, \'models/image-object.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/models/image-object.jshint.js");

;eval("define(\"elosh-client/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/router.jshint.js");

;eval("define(\"elosh-client/tests/routes/about.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/about.js should pass jshint\', function() { \n      ok(true, \'routes/about.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/routes/about.jshint.js");

;eval("define(\"elosh-client/tests/routes/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/application.js should pass jshint\', function() { \n      ok(true, \'routes/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/routes/application.jshint.js");

;eval("define(\"elosh-client/tests/routes/artwork.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/artwork.js should pass jshint\', function() { \n      ok(true, \'routes/artwork.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/routes/artwork.jshint.js");

;eval("define(\"elosh-client/tests/routes/artwork/category.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes/artwork\');\n    test(\'routes/artwork/category.js should pass jshint\', function() { \n      ok(true, \'routes/artwork/category.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/routes/artwork/category.jshint.js");

;eval("define(\"elosh-client/tests/routes/artwork/category/show.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes/artwork/category\');\n    test(\'routes/artwork/category/show.js should pass jshint\', function() { \n      ok(true, \'routes/artwork/category/show.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/routes/artwork/category/show.jshint.js");

;eval("define(\"elosh-client/tests/routes/artwork/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes/artwork\');\n    test(\'routes/artwork/index.js should pass jshint\', function() { \n      ok(true, \'routes/artwork/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/routes/artwork/index.jshint.js");

;eval("define(\"elosh-client/tests/routes/books/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes/books\');\n    test(\'routes/books/index.js should pass jshint\', function() { \n      ok(true, \'routes/books/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/routes/books/index.jshint.js");

;eval("define(\"elosh-client/tests/routes/books/show.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes/books\');\n    test(\'routes/books/show.js should pass jshint\', function() { \n      ok(true, \'routes/books/show.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/routes/books/show.jshint.js");

;eval("define(\"elosh-client/tests/routes/books/show/book-page.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes/books/show\');\n    test(\'routes/books/show/book-page.js should pass jshint\', function() { \n      ok(true, \'routes/books/show/book-page.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/routes/books/show/book-page.jshint.js");

;eval("define(\"elosh-client/tests/routes/index.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/index.js should pass jshint\', function() { \n      ok(true, \'routes/index.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/routes/index.jshint.js");

;eval("define(\"elosh-client/tests/serializers/about.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - serializers\');\n    test(\'serializers/about.js should pass jshint\', function() { \n      ok(true, \'serializers/about.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/serializers/about.jshint.js");

;eval("define(\"elosh-client/tests/serializers/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - serializers\');\n    test(\'serializers/application.js should pass jshint\', function() { \n      ok(true, \'serializers/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/serializers/application.jshint.js");

;eval("define(\"elosh-client/tests/serializers/artwork-category.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - serializers\');\n    test(\'serializers/artwork-category.js should pass jshint\', function() { \n      ok(true, \'serializers/artwork-category.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/serializers/artwork-category.jshint.js");

;eval("define(\"elosh-client/tests/serializers/artwork.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - serializers\');\n    test(\'serializers/artwork.js should pass jshint\', function() { \n      ok(true, \'serializers/artwork.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/serializers/artwork.jshint.js");

;eval("define(\"elosh-client/tests/serializers/book.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - serializers\');\n    test(\'serializers/book.js should pass jshint\', function() { \n      ok(true, \'serializers/book.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/serializers/book.jshint.js");

;eval("define(\"elosh-client/tests/test-helper\", \n  [\"elosh-client/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=elosh-client/tests/test-helper.js");

;eval("define(\"elosh-client/tests/unit/initializers/preload-artwork-test\", \n  [\"ember\",\"elosh-client/initializers/preload-artwork\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var initialize = __dependency2__.initialize;\n\n    var container, application;\n\n    module(\'PreloadArtworkInitializer\', {\n      setup: function() {\n        Ember.run(function() {\n          application = Ember.Application.create();\n          container = application.__container__;\n          application.deferReadiness();\n        });\n      }\n    });\n\n    // Replace this with your real tests.\n    test(\'it works\', function() {\n      initialize(container, application);\n\n      // you would normally confirm the results of the initializer here\n      ok(true);\n    });\n  });//# sourceURL=elosh-client/tests/unit/initializers/preload-artwork-test.js");

;eval("define(\"elosh-client/tests/views/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - views\');\n    test(\'views/application.js should pass jshint\', function() { \n      ok(true, \'views/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=elosh-client/tests/views/application.jshint.js");

;eval("define(\"elosh-client/views/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.View.extend({\n\n    });\n  });//# sourceURL=elosh-client/views/application.js");

/* jshint ignore:start */

define('elosh-client/config/environment', ['ember'], function(Ember) {
  return { 'default': {"modulePrefix":"elosh-client","environment":"development","baseURL":"/","locationType":"auto","EmberENV":{"FEATURES":{}},"APP":{"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true},"contentSecurityPolicyHeader":"Content-Security-Policy-Report-Only","contentSecurityPolicy":{"default-src":"'none'","script-src":"'self' 'unsafe-eval'","font-src":"'self'","connect-src":"'self'","img-src":"'self'","style-src":"'self'","media-src":"'self'"},"exportApplicationGlobal":true}};


});

if (runningTests) {
  require("elosh-client/tests/test-helper");
} else {
  require("elosh-client/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}



/* jshint ignore:end */
